name: release
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write
  
jobs:
  bump_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get the release version from the tag
        id: get_version
        shell: bash
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

  publish_crate:
    name: publish_crate
    runs-on: ubuntu-latest
    needs: bump_version
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Update version in Cargo.toml
        shell: bash
        run: sed -i.bak 's/0.0.0/${{ needs.bump_version.outputs.version }}/g' Cargo.toml && rm Cargo.toml.bak
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          args: --allow-dirty

  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.job.os }}
    needs: [bump_version, publish_crate]
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu }
          - { os: macos-latest, target: x86_64-apple-darwin }
          - { os: macos-latest, target: aarch64-apple-darwin }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
      - name: Update clang
        if: startsWith(matrix.job.os, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y clang 
      - name: Update version in Cargo.toml
        shell: bash
        run: |
          sed -i.bak 's/0.0.0/${{ needs.bump_version.outputs.version }}/g' Cargo.toml && rm Cargo.toml.bak
      - name: Build with cargo
        shell: bash
        run: |
          cargo build --release --target=${{ matrix.job.target }}
      - name: Package the project into a zip file
        id: package
        shell: bash
        run: |
          PKG_BASENAME="rumina-${{ needs.bump_version.outputs.version }}-${{ matrix.job.target }}"
          PKG_NAME="${PKG_BASENAME}.zip"
          mkdir -p "${PKG_BASENAME}"
          mv README.md LICENSE cov_reporter.py "${PKG_BASENAME}"
          mv target/${{ matrix.job.target }}/release/rumina "${PKG_BASENAME}/"
          zip -r "${PKG_NAME}" "${PKG_BASENAME}"
          echo "ASSET=${PKG_NAME}" >> $GITHUB_ENV
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
