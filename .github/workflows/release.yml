name: release

on:
  push:
    tags:
      - '*.*.*'  # Matches semantic version tags like 1.2.3 or v1.2.3

permissions:
  contents: write

jobs:
  extract_version:
    name: Extract version from Cargo.toml
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract version
        id: version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | head -1 | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  publish_crate:
    name: Publish crate to Cargo
    runs-on: ubuntu-latest
    needs: extract_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Publish to Cargo
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          args: --allow-dirty

  build-and-upload:
    name: Build and upload release assets
    runs-on: ${{ matrix.job.os }}
    needs: [extract_version, publish_crate]
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu }
          - { os: macos-latest, target: x86_64-apple-darwin }
          - { os: macos-latest, target: aarch64-apple-darwin }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
      - name: Install clang for Ubuntu
        if: startsWith(matrix.job.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y clang
      - name: Build with Cargo
        run: |
          cargo build --release --target=${{ matrix.job.target }}
      - name: Package release
        id: package
        run: |
          PKG_BASENAME="rumina-${{ needs.extract_version.outputs.version }}-${{ matrix.job.target }}"
          PKG_NAME="${PKG_BASENAME}.zip"
          mkdir -p "${PKG_BASENAME}"
          cp README.md LICENSE cov_reporter.py "${PKG_BASENAME}/" || true
          cp target/${{ matrix.job.target }}/release/rumina "${PKG_BASENAME}/"

          mkdir -p "${PKG_BASENAME}/test"
          cp -r test "${PKG_BASENAME}/test/"

          zip -r "${PKG_NAME}" "${PKG_BASENAME}"
          echo "ASSET=${PKG_NAME}" >> $GITHUB_ENV
      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            ${{ env.ASSET }}
